// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIImage;
@class NSCoder;

/**
  Use this class for displaying image based items.
*/
SWIFT_CLASS_NAMED("ImageItem")
@interface MYImageItem : UIImageView
@property (nonatomic) UIEdgeInsets contentInset;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol MYTableViewIndexStyle;

/**
  Protocol for customizing index items behavior. Implicitly confirmed by all UIView subclasses.
*/
SWIFT_PROTOCOL_NAMED("IndexItem")
@protocol MYIndexItem
/**
  Returns the size that best fits the specified size.
*/
- (CGSize)sizeThatFits:(CGSize)size;
/**
  Indicates that the closest neighborhood of this item can not be truncated. The flag is only
  checked if the receiver is the first or the last item in index sequence.
  The method is used to mimic native index behavior. E.g, UITableView never truncates items
  after search item and before # sign.
*/
- (BOOL)blocksEdgeTruncation;
/**
  Implement this method to apply style attributes of table index to the item.
*/
- (void)applyStyle:(id <MYTableViewIndexStyle> _Nonnull)style;
@end


@interface NSObject (SWIFT_EXTENSION(MYTableViewIndex))
@end


/**
  Use this class to get a magnifying glass icon similar to UITableViewIndexSearch.
*/
SWIFT_CLASS_NAMED("SearchItem")
@interface MYSearchItem : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)drawRect:(CGRect)rect;
- (BOOL)blocksEdgeTruncation;
@end


/**
  Use this class for displaying text based items.
*/
SWIFT_CLASS_NAMED("StringItem")
@interface MYStringItem : UILabel
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)blocksEdgeTruncation;
- (void)applyStyle:(id <MYTableViewIndexStyle> _Nonnull)style;
- (void)tintColorDidChange;
- (void)didMoveToWindow;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIFont;

SWIFT_PROTOCOL_NAMED("Style")
@protocol MYTableViewIndexStyle
@property (nonatomic, readonly, strong) UIFont * _Nonnull font;
@property (nonatomic, readonly) CGFloat itemSpacing;
@end

@protocol MYTableViewIndexDataSource;
@class UITouch;
@class UIEvent;
@protocol MYTableViewIndexDelegate;

SWIFT_CLASS_NAMED("TableViewIndex")
@interface MYTableViewIndex : UIControl
/**
  Data source for the table index object. See TableViewIndexDataSource protocol for details.
*/
@property (nonatomic, weak) IBOutlet id <MYTableViewIndexDataSource> _Nullable dataSource;
/**
  Delegate for the table index object. See TableViewIndexDelegate protocol for details.
*/
@property (nonatomic, weak) IBOutlet id <MYTableViewIndexDelegate> _Nullable delegate;
/**
  Background view is displayed below the index items and can be set to any UIView.
  If not set or was set to nil, creates a default view which mimics a system index appearance.
*/
@property (nonatomic, strong) UIView * _Nullable backgroundView;
/**
  Font for the index view items. If not set or set to nil, uses a default font which is chosen to
  match system appearance.
*/
@property (nonatomic, strong) UIFont * _Nullable font;
/**
  The distance that index items are inset from the enclosing background view. The property
  doesn’t change the position of index items. Instead, it changes size of the background view
  to match the inset. In other words, the background view “wraps” the index content.
  Set inset value to CGFloat.max to make background view fill all the available space on that side.
*/
@property (nonatomic) UIEdgeInsets indexInset;
/**
  The distance that index items are shifted inside the enclosing background view. The property
  changes the position of items and doesn’t affect the size of the background view.
*/
@property (nonatomic) UIOffset indexOffset;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  The array of all items provided by data source.
*/
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull items;
/**
  The array of items currently displayed by table index.
*/
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull displayedItems;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Forces table index to reload its items. This causes table index to discard its current items
  and refill itself from the data source.
*/
- (void)reloadData;
/**
  Returns a drawing area for the index items.
*/
- (CGRect)indexRect;
/**
  Returns a drawing area for the background view.
*/
- (CGRect)backgroundRect;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


@interface MYTableViewIndex (SWIFT_EXTENSION(MYTableViewIndex))
- (void)prepareForInterfaceBuilder;
@end

@class UITableView;

SWIFT_CLASS_NAMED("TableViewIndexController")
@interface MYTableViewIndexController : NSObject
/**
  Table index managed by controller.
*/
@property (nonatomic, readonly, strong) MYTableViewIndex * _Nonnull tableViewIndex;
/**
  Set closure to tune layout of the table index.
*/
@property (nonatomic, copy) void (^ _Nullable layouter)(UITableView * _Nonnull, MYTableViewIndex * _Nonnull);
- (nonnull instancetype)initWithTableView:(UITableView * _Nonnull)tableView OBJC_DESIGNATED_INITIALIZER;
/**
  Hides or shows the table index. Completion closure is called instantly if animated flag is false.
  Use alongsideAnimations closure to run additional animations in the same context as the hide/show
  animation.
*/
- (void)setHidden:(BOOL)hidden animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion alongsideAnimations:(void (^ _Nullable)(void))alongsideAnimations;
- (void)setHidden:(BOOL)hidden animated:(BOOL)animated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("TableViewIndexDataSource")
@protocol MYTableViewIndexDataSource <NSObject>
/**
  Provides a set of items to display in the table index. Default set of views tuned for
  displaying text, images, search indicator and truncation items are provided.
  Can be any view basically, but please avoid passing UITableViews :)
  See IndexItem protocol for item customization points.
*/
- (NSArray<UIView *> * _Nonnull)indexItemsFor:(MYTableViewIndex * _Nonnull)tableViewIndex;
@optional
/**
  Provides a class for truncation items. Truncation items are used when there is not enough
  space for displaying all the items provided by the data source. If this happens, table index
  omits some of the items from being displayed and inserts truncation items instead.
  By default table index uses TruncationItem class, tuned to match native index apperance.
*/
- (Class _Nonnull)truncationItemClassFor:(MYTableViewIndex * _Nonnull)tableViewIndex;
@end


SWIFT_PROTOCOL_NAMED("TableViewIndexDelegate")
@protocol MYTableViewIndexDelegate <NSObject>
@optional
/**
  Called as a result of recognizing an index touch. Can be used to scroll table view to
  the corresponding section.
*/
- (void)tableViewIndex:(MYTableViewIndex * _Nonnull)tableViewIndex didSelect:(UIView * _Nonnull)item at:(NSInteger)index;
@end


/**
  The item matches Apple’s \code
  •
  \endcode symbols used as truncation indicators. Used it by default in table index.
*/
SWIFT_CLASS_NAMED("TruncationItem")
@interface MYTruncationItem : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)drawRect:(CGRect)rect;
@end


@interface UIFont (SWIFT_EXTENSION(MYTableViewIndex))
@end


@interface UIView (SWIFT_EXTENSION(MYTableViewIndex)) <MYIndexItem>
- (BOOL)blocksEdgeTruncation;
- (void)applyStyle:(id <MYTableViewIndexStyle> _Nonnull)style;
@end


@interface UIView (SWIFT_EXTENSION(MYTableViewIndex))
@end

#pragma clang diagnostic pop
